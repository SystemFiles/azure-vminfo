name: CI

on:
  push:
    branches: [master, main, BENS-0013]

jobs:
  rust_tests:
    name: Run rust tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        manifests: ["./Cargo.toml", "./lib_vminfo/Cargo.toml"]
      fail-fast: false
    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
      - name: Set up the Windows environment
        run: |
          choco install llvm
          powershell.exe scripts/symlinks-to-hardlinks.ps1
        if: runner.os == 'Windows'
      - name: Set up the Mac environment
        run: brew install autoconf automake libtool
        if: runner.os == 'macOS'
      - name: Cache cargo dependencies
        uses: actions/cache@v2
        with:
          path: |
              ~/.cargo/registry
              ~/.cargo/git
              target
          key: ${{ runner.os }}-debug_opt3-${{ hashFiles('**/Cargo.lock') }}
      - name: run rust tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --manifest-path ${{ matrix.manifests }}
      - name: check compilation without threading
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --no-default-features --manifest-path ${{ matrix.manifests }}
  rust_deploy_libs:
    name: Deploy Libs to crates.io
    strategy:
      matrix:
        lib_manifests: [ "./lib_vminfo/Cargo.toml" ]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
      - uses: actions-rs/cargo@v1
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          command: publish
          args: --manifest-path ${{ matrix.lib_manifests }} --all-features
    needs:
      - rust_tests
  rust_deploy_app_crates:
    name: Deploy CLI App to crates.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
          target: ${{ matrix.target }}
      - name: publish CLI package to creates.io
        uses: actions-rs/cargo@v1
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          command: publish
          args: --manifest-path ./Cargo.toml --all-features
    needs:
      - rust_tests
      - rust_deploy_libs
  rust_deploy_app_gh:
    name: Deploy CLI App as Github Release
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        target: [ aarch64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf, i686-unknown-linux-gnu, i686-unknown-linux-musl, mips-unknown-linux-gnu, mips64-unknown-linux-gnuabi64, mips64el-unknown-linux-gnuabi64, mipsel-unknown-linux-gnu, powerpc-unknown-linux-gnu, powerpc64-unknown-linux-gnu, powerpc64le-unknown-linux-gnu, arm-unknown-linux-gnueabi, x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
    steps:
      - name: cross-compile rust binary for release
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}
      - name: package release binaries for Github
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release          
          tar czvf ../../../az-vminfo-${{ matrix.target }}.tar.gz az-vminfo
          cd -
      - name: publish Github release
        uses: softprops/action-gh-release@v1
        with:
            files: 'az-vminfo*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
      - rust_tests
      - rust_deploy_libs